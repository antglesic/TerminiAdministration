// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using TerminiDataAccess.TerminiContext.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace TerminiDataAccess.TerminiContext
{
    [EntityFrameworkInternal]
    public partial class TerminPlayersEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "TerminiDataAccess.TerminiContext.Models.TerminPlayers",
                typeof(TerminPlayers),
                baseEntityType,
                propertyCount: 5,
                navigationCount: 2,
                foreignKeyCount: 2,
                namedIndexCount: 3,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(TerminPlayers).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            var active = runtimeEntityType.AddProperty(
                "Active",
                typeof(bool),
                propertyInfo: typeof(TerminPlayers).GetProperty("Active", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<Active>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: true);
            active.AddAnnotation("Relational:DefaultValue", true);
            active.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var dateCreated = runtimeEntityType.AddProperty(
                "DateCreated",
                typeof(DateTime),
                propertyInfo: typeof(TerminPlayers).GetProperty("DateCreated", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<DateCreated>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            dateCreated.AddAnnotation("Relational:ColumnType", "datetime");
            dateCreated.AddAnnotation("Relational:DefaultValueSql", "(getdate())");
            dateCreated.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var playerId = runtimeEntityType.AddProperty(
                "PlayerId",
                typeof(int),
                propertyInfo: typeof(TerminPlayers).GetProperty("PlayerId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<PlayerId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            playerId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var terminId = runtimeEntityType.AddProperty(
                "TerminId",
                typeof(int),
                propertyInfo: typeof(TerminPlayers).GetProperty("TerminId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<TerminId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            terminId.AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);
            key.AddAnnotation("Relational:Name", "PK_Termini_Termin_Players_Id");

            var iX_Termini_Termin_PlayerId = runtimeEntityType.AddIndex(
                new[] { playerId },
                name: "IX_Termini_Termin_PlayerId");
            iX_Termini_Termin_PlayerId.AddAnnotation("Relational:Filter", "([Active]=(1))");

            var iX_Termini_Termin_TerminId = runtimeEntityType.AddIndex(
                new[] { terminId },
                name: "IX_Termini_Termin_TerminId");
            iX_Termini_Termin_TerminId.AddAnnotation("Relational:Filter", "([Active]=(1))");

            var iX_Termini_Termin_Termin_with_player = runtimeEntityType.AddIndex(
                new[] { terminId, playerId },
                name: "IX_Termini_Termin_Termin_with_player");
            iX_Termini_Termin_Termin_with_player.AddAnnotation("Relational:Filter", "([Active]=(1))");

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PlayerId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var player = declaringEntityType.AddNavigation("Player",
                runtimeForeignKey,
                onDependent: true,
                typeof(Player),
                propertyInfo: typeof(TerminPlayers).GetProperty("Player", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<Player>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var terminPlayers = principalEntityType.AddNavigation("TerminPlayers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TerminPlayers>),
                propertyInfo: typeof(Player).GetProperty("TerminPlayers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Player).GetField("<TerminPlayers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Termini_Termin_Players_PlayerId");
            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("TerminId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                required: true);

            var termin = declaringEntityType.AddNavigation("Termin",
                runtimeForeignKey,
                onDependent: true,
                typeof(Termin),
                propertyInfo: typeof(TerminPlayers).GetProperty("Termin", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(TerminPlayers).GetField("<Termin>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var terminPlayers = principalEntityType.AddNavigation("TerminPlayers",
                runtimeForeignKey,
                onDependent: false,
                typeof(ICollection<TerminPlayers>),
                propertyInfo: typeof(Termin).GetProperty("TerminPlayers", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Termin).GetField("<TerminPlayers>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            runtimeForeignKey.AddAnnotation("Relational:Name", "FK_Termini_Termin_Players_TerminId");
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", "Termini");
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Termin.Players");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
